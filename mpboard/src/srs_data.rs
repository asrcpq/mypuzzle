extern crate lazy_static;

lazy_static::lazy_static! {
pub static ref ID_TO_CHAR: Vec<char> = vec![
	'i', 'j', 'l', 'o', 's', 't', 'z', ' ',
];

// block pos table
// each two lines are 4 groups, each group is a block in certaion direction
// each group has four pairs, each pair is a pos of a group
pub static ref BPT: Vec<i32> = vec![
	0, 0, 1, 0, 2, 0, 3, 0, 0, 0, 0, 1, 0, 2, 0, 3,
	0, 0, 1, 0, 2, 0, 3, 0, 0, 0, 0, 1, 0, 2, 0, 3,
	0, 0, 0, 1, 1, 1, 2, 1, 0, 0, 1, 0, 0, 1, 0, 2,
	0, 0, 1, 0, 2, 0, 2, 1, 1, 0, 1, 1, 1, 2, 0, 2,
	2, 0, 2, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 1, 2,
	0, 0, 1, 0, 2, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 2,
	0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2,
	1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 2,
	1, 0, 0, 1, 1, 1, 2, 1, 0, 0, 0, 1, 0, 2, 1, 1,
	0, 0, 1, 0, 2, 0, 1, 1, 1, 0, 1, 1, 1, 2, 0, 1,
	0, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2,
	0, 0, 1, 0, 1, 1, 2, 1, 1, 0, 1, 1, 0, 1, 0, 2,
];

pub static ref BLOCK_HEIGHT: Vec<i32> = vec![
	1, 4, 1, 4,
	2, 3, 2, 3,
	2, 3, 2, 3,
	2, 2, 2, 2,
	2, 3, 2, 3,
	2, 3, 2, 3,
	2, 3, 2, 3,
];

pub static ref COLORMAP: Vec<u8> = vec![6, 4, 7, 3, 2, 5, 1, 0];

// standard rotation pos
// each line is for a type of block, 4 pairs of pos(left up) indicates 4 directions
// each pos is the difference to first pair
pub static ref SRP: Vec<i32> = vec![
	0, 0, 2, -1, 0, 1, 1, -1,
	0, 0, 1, 0, 0, 1, 0, 0,
	0, 0, 1, 0, 0, 1, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1, 0, 0, 1, 0, 0,
	0, 0, 1, 0, 0, 1, 0, 0,
	0, 0, 1, 0, 0, 1, 0, 0,
];

// wall kick pos
// line 1-4: 0->1 to 3->0, 5 attempts
// line 5-8: 0->3 to 3->2
pub static ref WKD: Vec<i32> = vec![
	 0, 0, -1, 0, -1,-1, 0, 2, -1, 2,
	 0, 0,  1, 0,  1, 1, 0,-2,  1,-2,
	 0, 0,  1, 0,  1,-1, 0, 2,  1, 2,
	 0, 0, -1, 0, -1, 1, 0,-2, -1,-2,
	 0, 0,  1, 0,  1,-1, 0, 2,  1, 2,
	 0, 0,  1, 0,  1, 1, 0,-2,  1,-2,
	 0, 0, -1, 0, -1,-1, 0, 2, -1, 2,
	 0, 0, -1, 0, -1, 1, 0,-2, -1,-2,
];
// I block's WKD
pub static ref IWKD: Vec<i32> = vec![
	0, 0, -2, 0,  1, 0, -2, 1,  1,-2,
	0, 0, -1, 0,  2, 0, -1,-2,  2, 1,
	0, 0,  2, 0, -1, 0,  2,-1, -1, 2,
	0, 0,  1, 0, -2, 0,  1, 2, -2,-1,
	0, 0, -1, 0,  2, 0, -1,-2,  2, 1,
	0, 0,  2, 0, -1, 0,  2,-1, -1, 2,
	0, 0,  1, 0, -2, 0,  1, 2, -2,-1,
	0, 0, -2, 0,  1, 0, -2, 1,  1,-2,
];
// flip wall kick, tetr.io style
// 0->2 to 3->1
pub static ref FWKD: Vec<i32> = vec![
	0, 0, 0, 1, 1, 1, -1, 1, 1, 0, -1, 0,
	0, 0, 1, 0, 1, 2, 1, 1, 0, 2, 0, 1,
	0, 0, 0, -1, -1, -1, 1, -1, -1, 0, 1, 0,
	0, 0, -1, 0, -1, 2, -1, 1, 0, 2, 0, 1,
];

// attack table
pub static ref ATK_NORMAL: Vec<u32> = vec![
	0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6,
	2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
	4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
];
pub static ref ATK_TSPIN_MINI: Vec<u32> = vec![
	0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6,
	1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, // mini double = double
];

pub static ref ATK_TSPIN_REGULAR: Vec<u32> = vec![
	2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
	4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36,
];

pub static ref ATK_B2B_QUAD: Vec<u32> = vec![
	5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30,
];

pub static ref ATK_B2B_TSPIN_MINI: Vec<u32> = vec![
	1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6,
	2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12,
];

pub static ref ATK_B2B_TSPIN_REGULAR: Vec<u32> = vec![
	3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 18,
	5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 25, 26, 27, 28, 30,
	7, 8, 10, 12, 14, 15, 17, 19, 21, 22, 24, 26, 28, 29, 31, 33, 35, 36, 38, 40, 42,
];

pub static ref ATK_AC: Vec<u32> = vec![10; 21];

}
